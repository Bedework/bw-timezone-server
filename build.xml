<?xml version="1.0"?>

<!-- This is the ant build file for the timezones package.

     The target of interest is build which should leave a jar file
     in the dist directory..

     Authors: Mike Douglass   douglm - rpi.edu
-->

<project name="timezones" default="build">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <property environment="env"/>
  <property name="base.name" value="timezones"/>
  <dirname property="project.home" file="${ant.file}"/>
  <property file="${project.home}/build.properties" />

  <property name="project.name" value="${org.bedework.package.name}"/>
  <property name="project.version" value="${org.bedework.version}"/>

  <property name="dist.home" location="${project.home}/dist"/>
  <property name="lib.dir" location="${project.home}/lib"/>

  <property name="build.dir" location="${project.home}/build"/>
  <property name="buildjar" location="${build.dir}/buildjar.xml"/>
  <property name="buildwar" location="${build.dir}/buildwar.xml"/>

  <property name="org.bedework.libcache.dir"
            location="${project.home}/libcache"/>

	<!-- Used to select our properties --> 
	<property name="org.bedework.deploy.name" value="tzsvr" />

  <import file="${build.dir}/getJar.xml"/>
  <import file="${build.dir}/loadDeployConfig.xml"/>

  <!-- =================================================================
       init:
       ================================================================= -->

  <target name="init" >
    <property name="org.bedework.project.bedework"
              location="${project.home}/../bedework" />

    <loadDeployConfig />
  	
    <propertyset id="deploy-app-properties">
      <propertyref prefix="org.bedework.app.${org.bedework.deploy.name}"/>
      <globmapper from="org.bedework.app.${org.bedework.deploy.name}.*" to="propval.app.*"/>
    </propertyset>
  	
    <!-- echo message="*** Options file: ${org.bedework.carddav.options}" / -->

    <delete dir="${lib.dir}" />
    <mkdir dir="${lib.dir}" />

    <property name="org.bedework.getjar.property.prefix"
              value="org.bedework.appjar" />

    <getJar name="commons-codec" version="1.3" />
    <getJar name="commons-httpclient" version="3.0" />
    <getJar name="commons-lang" version="2.1" />
    <getJar name="ehcache" version="1.6.2" />
    <getJar name="ical4j" version="head-dev" />
    <getJar name="log4j" version="1.2.8" />
    <getJar name="servletapi" version="2.4" />

    <getJar name="bw-deployutil" version="3.6" />

    <path id="app.xml.cp">
      <pathelement location="${org.bedework.appjar.bw-deployutil}"/>
    </path>

    <taskdef name="resolveFile"
             classname="org.bedework.deployment.ResolveFile">
      <classpath refid="app.xml.cp"/>
    </taskdef>

    <getJar name="rpiutil" version="3.6" project="rpiutil" 
            projecthome="${project.home}/../bedework/projects/rpiutil" />

    <property name="org.bedework.tzsvr.base" 
              location="${project.home}/tzsvr" />

    <mkdir dir="${dist.home}" />

    <property name="test.data.dir"
              location="${dist.home}/test-data" />

    <property name="edu.rpi.cmt.empty.dir"
              location="${dist.home}/empty-dir" />
    <mkdir dir="${edu.rpi.cmt.empty.dir}" />

    <fileset id="empty.fileset" dir="${edu.rpi.cmt.empty.dir}"
             excludes="*" />
    <!-- default to empty -->
    <fileset id="base.resource.files" refid="empty.fileset" />

    <property name="tzsvr.jar"
              location="${dist.home}/${org.bedework.timezonessvr.jar}-${project.version}.jar" />

    <!-- Name of our war file -->
    <property name="propval.app.war.name" value="tzsvr" />

    <!-- ==================== Compilation Classpath ==================== -->

    <path id="compile.classpath">
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${dist.home}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${java.home}">
         <include name="lib/tools.jar"/>
      </fileset>
    </path>
  </target>

  <!-- =================================================================
       Clean out all library files from other projects and all generated
       files in preparation for a complete rebuild.

       Needed because switching versions leaves a load of old bedework
       generated stuff in the libraries.
       ================================================================= -->
  <target name="deep-clean" depends="clean">
    <delete dir="${lib.dir}" />
  </target>

  <!-- =================================================================
       Clean all generated files
       ================================================================= -->
  <target name="clean">
    <delete dir="${dist.home}" />
    <delete dir="${libapi.dir}" />
  </target>

  <!-- =================================================================
       Clean up after a build.
       ================================================================= -->
  <target name="cleanup">
    <delete dir="${edu.rpi.cmt.empty.dir}" />
  </target>

  <!-- ========================== Base build Targets ===================
       Here we have one target building the classes and interfaces that make
       up the access control suite.
       ================================================================= -->

  <target name="clean-build" depends="clean,build"
          description="Clean and compile timezone classes"/>

  <target name="clean-build-all" depends="clean,build-all"
          description="Clean and compile timezone classes"/>

  <target name="build" depends="init,build-source,build-war,cleanup"
          description="Compile timezone classes"/>

  <target name="build-all" depends="build"
          description="Compile timezone classes"/>

  <!-- ===================== build.source Target ===============================
     This target builds jar files ready for the deploy target.
     =================================================================== -->

  <target name="build-source" depends="init,bld.tzsvr"  />

  <!-- ===================== build.war Target ===============================
     This target builds war files ready for the deploy target.
     =================================================================== -->

  <target name="build-war" depends="build-source" >
    <!-- Create a servlet.properties file -->

    <mkdir dir="${dist.home}/temp/properties"/>

    <echo file="${dist.home}/temp/properties/tzsvr.properties">
# ========================================================================
# Properties file for the timezone server
# ========================================================================
#
# Generated by the build process

# Property defining location of the registry
tzsvc.tzdata.url=${org.bedework.app.tzsvr.tzdata.url}

# Property defining integer seconds refetch interval for data
tzsvc.refetch.interval=${org.bedework.app.tzsvr.refetch.interval}

# Property defining a key to allow POST
tzsvc.post.id=${org.bedework.app.tzsvr.post.id}

# =========================================================================
# Caching information - most of this is in ehcache.xml
# =========================================================================

tzsvc.vtimezones.cache.name=${org.bedework.app.tzsvr.vtimezones.cache.name}

#tzsvc.zoneinfo.cache.name=${}

    </echo>

    <copy todir="${dist.home}/temp/properties">
      <fileset dir="${project.home}/resources/properties"
               includes="*" />
    </copy>

    <ant antfile="${build.dir}/buildwar.xml" inheritrefs="true"
         target="build" >
      <propertyset refid="deploy-app-properties" />
      <property name="app.sou.dir" location="${org.bedework.tzsvr.base}" />
      <property name="propval.app.display.name"
                value="Timezones service" />
    </ant>
  </target>

  <!-- ===================== deploy Target ===============================
     This target deploys a war file to our app server.
     =================================================================== -->

  <target name="deploy" depends="build-war" >
    <if>
      <isset property="org.bedework.appserver.deploy.dir"/>
      <then>
        <delete dir="${org.bedework.appserver.deploy.dir}/${propval.app.war.name}" />
        <delete dir="${org.bedework.appserver.deploy.dir}/${propval.app.war.name}.war" />

        <copy todir="${org.bedework.appserver.deploy.dir}">
          <fileset dir="${dist.home}">
            <include name="*.war" />
         </fileset>
        </copy>
      </then>
      <else>
        <echo message="********* No deploy directory defined" />
      </else>
    </if>
  </target>

  <!-- ==================== Javadoc Target ===============================
       The "javadoc" target creates Javadoc API documentation for the Java
       classes included in your application.  Normally, this is only required
       when preparing a distribution release, but is available as a separate
       target in case the developer wants to create Javadocs independently.
       =================================================================== -->

  <target name="javadoc" depends="init"
          description="Create Javadoc API documentation">
    <property name="destdir" location="${dist.home}/docs/api"/>
    <mkdir dir="${destdir}"/>

    <javadoc sourcepath="${org.bedework.tzsvr.base}/src:"
           classpathref="compile.classpath"
                destdir="${destdir}"
               overview="${project.home}/overview.html"
           packagenames="org.bedework.*,
                         edu.rpi.*"
                 access="public"
                 author="true"
                version="true"
          breakiterator="yes"
            windowtitle="${project.name} ${project.version} Timezones Documentation">
      <doctitle><![CDATA[${project.name} ${project.version}<br/>Timezones Documentation]]></doctitle>
      <header><![CDATA[${project.name} ${project.version}<br/>Timezones Documentation]]></header>
      <link href="${env.JAVA_HOME}/docs/api" />
    </javadoc>
  </target>

  <!-- ======================== component build targets =======================
       ================================================================= -->

  <target name="bld.tzsvr" >
    <ant antfile="${org.bedework.tzsvr.base}/build.xml" inheritrefs="true"
         target="build" >
      <property name="build.jar.file" location="${tzsvr.jar}" />
    </ant>
  </target>
</project>
