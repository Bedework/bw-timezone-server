<?xml version="1.0"?>

<!-- This is the ant build file for the timezones package.

     Authors: Mike Douglass   douglm  rpi.edu
-->

<project name="tzsvr" default="deploy">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <property environment="env"/>
  <dirname property="project.home" file="${ant.file}"/>

  <property file="${project.home}/build.properties" />
  
  <property name="bedework.home"
            location="${project.home}/../bedework" />

  <property name="build.dir" location="${bedework.home}/build"/>

  <import file="${build.dir}/buildTools/deftasks.xml"/>

  <deftasks/>

  <projectDefs name="${org.bedework.package.name}"
               version="${org.bedework.bwtzsvr.version}" 
               deployment-name="tzsvr"
  />

  <import file="${build.dir}/loadDeployConfig.xml"/>
  <import file="${build.dir}/buildTools/xjc.xml"/>

  <import file="${project.home}/appjars.xml" />

  <property name="org.bedework.sou.classpath.properties"
            location="${project.home}/resources" />

  <property name="ear.meta.dir" location="${project.home}/ear.meta"/>

  <!-- =================================================================
       init:
       ================================================================= -->

  <target name="init">
    <projectInit/>
    
    <property name="org.bedework.project.bedework"
              location="${project.home}/../bedework" />

    <loadDeployConfig />
  	
    <property name="org.bedework.temp.wars.home"
              location="${dist.home}/temp/wars" />
    
    <if>
      <not>
        <isset property="org.bedework.global.context.roots" />
      </not>
      <then>
        <tempfile property="org.bedework.global.context.roots"
                  destdir="${org.bedework.temp.dir}"
                  prefix="context-roots" suffix=".properties" />
      </then>
    </if>

  	<property name="org.bedework.options.file"
  	          value="${org.bedework.config.options}" />

    <property name="org.bedework.getjar.property.prefix"
              value="org.bedework.appjar" />

    <getJar name="commons-codec" version="1.3" />
    <getJar name="commons-httpclient" version="3.0" />
    <getJar name="commons-lang" version="2.1" />
    <getJar name="ehcache" version="1.6.2" />
    <getJar name="ical4j" version="1.0-rc3-SNAPSHOT" />
    <getJar name="log4j" version="1.2.8" />
    <getJar name="servletapi" version="2.4" />

    <getJar name="rpiutil" version="${org.bedework.rpiutil.version}" project="rpiutil" 
            projecthome="${project.home}/../bedework/projects/rpiutil" />

    <property name="org.bedework.module.gensrc.base"
              location="${project.home}/gensrc" />

    <property name="org.bedework.module.common.base"
              location="${project.home}/common" />

    <property name="org.bedework.module.server.base" 
              location="${project.home}/server" />

    <property name="org.bedework.module.service.base"
              location="${project.home}/service" />
    
    <property name="org.bedework.module.schema.dir" 
              location="${bedework.home}/resources/timezones" />

    <property name="gensrc.jar"
              location="${dist.home}/${org.bedework.module.gensrc.jar}-${project.version}.jar" />

    <property name="common.jar"
              location="${dist.home}/${org.bedework.module.common.jar}-${project.version}.jar" />

    <property name="server.jar"
              location="${dist.home}/${org.bedework.module.server.jar}-${project.version}.jar" />

    <property name="service.jar"
              location="${dist.home}/${org.bedework.module.service.jar}-${project.version}.jar" />
  </target>

  <target name="deploy-init" depends="init">

    <!-- ========= Stuff in main bedework deployment build file =========   -->
    <!-- Where we put ear stuff -->
    <if>
      <isset property="org.bedework.global.build.ear" />
      <then>
        <property name="app.ear.file.name"
                  value="${org.bedework.global.ear.name}-${ant.project.name}.ear" />

        <property name="service.app.zip.name"
                  value="${org.bedework.global.ear.name}-${ant.project.name}svc" />

        <property name="org.bedework.ear.name"
                  value="${org.bedework.global.ear.name}-${ant.project.name}" />

        <property name="org.bedework.ear.templib"
                  location="${org.bedework.temp.dir}/earlib" />

        <property name="org.bedework.ear.properties.dir"
                  location="${org.bedework.temp.dir}/ear-properties" />

        <delete dir="${org.bedework.ear.templib}" />
        <mkdir dir="${org.bedework.ear.templib}" />

        <delete dir="${org.bedework.ear.properties.dir}" />
        <mkdir dir="${org.bedework.ear.properties.dir}" />
      </then>
    </if>
    
    <property name="org.bedework.temp.shellscr.home"
              location="${org.bedework.temp.dir}/shellscr" />

    <property name="org.bedework.temp.extrajars.dir"
              location="${org.bedework.temp.dir}/extrajars" />

    <!-- Preserve extra jars for ear builds -->
    <property name="org.bedework.temp.ear.extrajars.dir"
              location="${org.bedework.temp.dir}/earextrajars" />
    
    <property name="org.bedework.global.context.roots"
              location="${org.bedework.temp.dir}/context-roots.properties" />

    <!-- ===== End of stuff in main bedework deployment build file ======   -->
    
    <!-- Clean up before we start -->
    <delete dir="${org.bedework.temp.wars.home}" />
    <mkdir dir="${org.bedework.temp.wars.home}" />

    <delete dir="${org.bedework.temp.ear.extrajars.dir}" />
    <mkdir dir="${org.bedework.temp.ear.extrajars.dir}" />

    <delete dir="${org.bedework.temp.extrajars.dir}" />
    <mkdir dir="${org.bedework.temp.extrajars.dir}" />
  </target>

  <!-- ===================== build-source Target ===============================
     This target builds jar files ready for the deploy target.
     =================================================================== -->

  <target name="build-source"  depends="init" >
    <xjc schema="${org.bedework.module.schema.dir}/tzservice.xsd"
         module-base="${org.bedework.module.gensrc.base}"
         jar-file="${gensrc.jar}"
         bindingsdir="${org.bedework.module.schema.dir}/bindings"
    />

    <build-jar module-base="${org.bedework.module.common.base}" 
               jar-file="${common.jar}" />
    
    <build-jar module-base="${org.bedework.module.server.base}" 
               jar-file="${server.jar}" />
    
    <build-jar module-base="${org.bedework.module.service.base}" 
               jar-file="${service.jar}" />
    
    <getExtraJars/>

    <!-- ===============================================================
         Build the war
         =============================================================== -->
         
    <property name="app.sou.dir"
              location="${org.bedework.module.server.base}" />

    <ant antfile="${buildwar}" inheritRefs="true" target="build" >
      <property name="propval.app.context.root"
                value="${org.bedework.module.context.root}" />
      <property name="propval.app.war.name"
                value="${org.bedework.module.war.name}" />
      <property name="propval.app.web.xml"
                location="${app.sou.dir}/war/WEB-INF/web.xml" />

      <property name="org.bedework.deploy.name"
                value="${ant.project.name}" />
    </ant>
  </target>
 
  <!-- ===================== deploy Target ===============================
     Deploy if an application server is defined.
     =================================================================== -->

  <target name="deploy.zoneinfo" depends="deploy-init"
          description="Deploy zoneinfo data">
  	<copy file="${project.home}/tzdata.zip"
  	      todir="${org.bedework.appserver.dir}/${org.bedework.server.resource.root.dir}" />
  </target>

  <target name="deploy" depends="deploy-init,build"
               description="Deploy generated files">
    <getExtraJars/>
    
  	<!-- Service defined in ear file.
    <ant antfile="${build.dir}/deployService.xml" target="deploy" inheritRefs="true" >
      <property name="propval.app.zip.name"
                value="${service.app.zip.name}" />
      <property name="propval.app.options.path"
                value="properties/exsynch" />
      <property name="app.service.base" 
                location="${org.bedework.module.service.base}" />
      <property name="app.global.properties.dir" 
                location="${resources.dir}" />
   </ant>
   -->

    <getJar lib="${org.bedework.temp.extrajars.dir}"
            libcache="${org.bedework.libcache.dir}"
            name="bw-davio" version="3.6"
            projecthome="${bedework.home}/projects/davutil" />
    
    <getJar lib="${org.bedework.temp.extrajars.dir}"
            libcache="${org.bedework.libcache.dir}"
            name="log4j" version="1.2.8"/>

    <ant antfile="${build.dir}/../deployment/termination/webapp/build.xml" 
         target="deploy" inheritRefs="true"  >
      <property name="org.bedework.no.extra.ear.jars" value="yes" />
    </ant>
    
    <!-- Platform specific -->
    <ant antfile="${build.dir}/../deployment/termination/build.xml" 
         target="deploy" inheritRefs="true" />
  </target>

  <!-- ==================== Javadoc Target ===============================
       The "javadoc" target creates Javadoc API documentation for the Java
       classes included in your application.  Normally, this is only required
       when preparing a distribution release, but is available as a separate
       target in case the developer wants to create Javadocs independently.
       =================================================================== -->

  <target name="javadoc" depends="init"
          description="Create Javadoc API documentation">
    <property name="destdir" location="${dist.home}/docs/api"/>
    <mkdir dir="${destdir}"/>

    <javadoc sourcepath="${org.bedework.module.common.base}/src:${org.bedework.module.service.base}/src:${org.bedework.module.server.base}/src:"
           classpathref="compile.classpath"
                destdir="${destdir}"
               overview="${project.home}/overview.html"
           packagenames="org.bedework.*,
                         edu.rpi.*"
                 access="public"
                 author="true"
                version="true"
          breakiterator="yes"
            windowtitle="${project.name} ${project.version} Timezones Documentation">
      <doctitle><![CDATA[${project.name} ${project.version}<br/>Timezones Documentation]]></doctitle>
      <header><![CDATA[${project.name} ${project.version}<br/>Timezones Documentation]]></header>
      <link href="${env.JAVA_HOME}/docs/api" />
    </javadoc>
  </target>
</project>
